package controllers;

import play.*;
import play.data.Form;
import play.mvc.*;
import play.mvc.Http.MultipartFormData;
import play.mvc.Http.MultipartFormData.FilePart;
import views.html.*;
import models.*;
import play.libs.Json;

import java.io.File;
import java.util.*;

public class Application extends Controller {
	
	final static Form<User> userForm = Form.form(User.class);
	final static Form<Artist> artistForm = Form.form(Artist.class);
	final static Form<Song> songForm = Form.form(Song.class);
	
    public static Result index() {
    	return redirect(routes.Application.showTopTen("europe"));
    }
	
	public static Result showTopTen(String country){
		
		Service service = Service.getInstance();
		
		List<MusicType> musicTypes = service.getAllMusicTypes();     
        List<Artist> artists = service.getAllArtists();       
        List<Song> topSongsList = service.getTopSongs(country);
		
		List<NewsEntry> news = new ArrayList<NewsEntry>();
		NewsEntry entry = new NewsEntry();
		entry.setHeadline("Neuer Album!");
		entry.setShortDescription("Ein neuer Album ist RAUS!");
		entry.setDescription("Busta Ryhmes hat wieder ein neues Album rausgebracht. HÃ¶rt es euch an!");
		
		List<String> pictures = new ArrayList<String>();
		pictures.add("busta.jpg");
		entry.setPichturePaths(pictures);
		
		news.add(entry);
             
        return ok(index.render(country ,musicTypes, artists, topSongsList, news));
	}
	
	public static Result adminpanel() {
		return aplogin();
	}
	
	public static Result signup() {
		return ok(signup.render(userForm));
	}
	
	public static Result newUser(){
		Form<User> filledForm = userForm.bindFromRequest();	
		User created = filledForm.get();
		
		Service service = Service.getInstance();		
		if(service.createUser(created)) return index();
		else return badRequest();
	}
	
	public static Result newArtist(){
		Form<Artist> filledForm = artistForm.bindFromRequest();	
		Artist created = filledForm.get();
		
		Service service = Service.getInstance();		
		if(service.createArtist(created)) return apaddartist();
		else return badRequest();
	}
	
	public static Result getUsers(){
		Service service = Service.getInstance();
		ArrayList<User> users = service.getAllUsers();		
		return ok(Json.toJson(users));
	}
	
	public static Result deleteUser(int id){		
		Service service = Service.getInstance();
		service.deleteUser(id);			
		return ok();
	}
	
	public static Result getSongs(){
		Service service = Service.getInstance();
		ArrayList<Song> songs = service.getAllSongs();		
		return ok(Json.toJson(songs));
	}
	
	public static Result deleteSong(int id){		
		Service service = Service.getInstance();
		service.deleteSong(id);		
		return ok();
	}
	
	public static Result getArtists(){
		Service service = Service.getInstance();
		ArrayList<Artist> artists = service.getAllArtists();		
		return ok(Json.toJson(artists));
	}
	
	public static Result deleteArtist(int id){		
		Service service = Service.getInstance();
		service.deleteArtist(id);		
		return ok();
	}
	
	public static Result aplogin() {
		return ok(aplogin.render());
	}
	
	public static Result apaddsong() {
		Service service = Service.getInstance();
		
		List<Song> songs = service.getAllSongs();
		return ok(apaddsong.render(songs, songForm));
	}
	
	public static Result apusermanagement() {
		Service service = Service.getInstance();
		
		ArrayList<User> users = service.getAllUsers();		
		return ok(apusermanagement.render(users));
	}
	
	public static Result apaddartist() {
		Service service = Service.getInstance();
		
		List<Artist> artists = service.getAllArtists();
		return ok(apaddartist.render(artists, artistForm));
	}
	
	public static Result newSong(){
		
	  MultipartFormData body = request().body().asMultipartFormData();
	  FilePart picture = body.getFile("songFile");
	  
	  if (picture != null) {
	    String fileName = picture.getFilename();
	    String contentType = picture.getContentType(); 
	    File file = picture.getFile();
	    file.renameTo(new File(System.getProperty("user.dir") + "\\public\\music", fileName));
	    
	    Service service = Service.getInstance();
	    Map<String, String[]> values = body.asFormUrlEncoded();
	    
	    Song song = new Song();
	    song.setArtistId(Integer.parseInt(values.get("artistId")[0]));
	    song.setTitel(values.get("titel")[0]);
	    song.setFilePath(System.getProperty("user.dir") + "\\public\\music\\" + fileName);	
	    
	    service.createSong(song);
	        
	    return apaddsong();
	  } else {
	    flash("error", "Missing file");
	    return redirect(routes.Application.index());    
	  }
	}
	
	

	
}
